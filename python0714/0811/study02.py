import re  #정규표현식 모듈

print("-" * 5, "정규 표현식", "-" * 5)

#입력한대로 출력
data = """                    
park 800905-1049118
kim 700905-1059119
"""

print("-" * 5, "정규 표현식 미사용", "-" * 5)
print("원본 : {0}".format(data))

result = []

for line in data.split("\n"):
    word_result = []

    for word in line.split(" "): # 빈칸을 기준으로 리스트를 나눔
        if len(word) == 14 and word[:6].isdigit() and word[7:].isdigit():  #isdigit : 숫자로 만들어졌는가
            word = word[:6] + "-" + "*******"

        word_result.append(word)
    result.append(" ".join(word_result))
print("수정 : ", "\n".join(result))



print("-" * 5, "정규 표현식 사용", "-" * 5)
print("원본 : {0}".format(data))

pat = re.compile("(\d{6})[-]\d{7}")  #\d 숫자찾는명령어  #compile 메서드는 "패턴 객체"를 반환
# 앞에 6자는 그냥 들고오고 뒤에거는 밑에서 별로 변경
print("사본 : ", pat.sub("\g<1>-*******", data)) #data에서 정보를 가져와서 .sub 변경하라





# 정규표현식 메타 문자
# [] : 일치시키려는 문자 집합을 의미
#  ^ : [] 안에서 사용 시 not(부정)의 의미를 가짐
#  - : [] 안에서 사용 시 a(시작문자) ~ z(끝문자)까지 라는 의미를 가짐
#  (): 하나 패턴 구분자 안에서 서브 패턴을 사용하고자 할 경우 사용
# ^ : 문자열의 시작
# $ : 문자열의 종료
# . : \n 이 아닌 모든 임의 문자로 대체됨
# | : or의 의미
# ? : ? 앞의 문자가 0개 이거나 1개임
# + : + 앞의 문자가 1개 이상
# * : * 앞의 문자가 0개 이상
# {m, n} : 앞의 문자가 m개 이상 n개 이하. {0, 1} 은 ? 와 같은 의미
# {m,} : 앞의 문자가 m개 이상, {0,}은 *과 같음, {1,} + 와 같음
# {m} : 앞의 문자가 정확히 m개, {m, m} 과 같음
# \s : 공백 문자
# \b : 문자와 공백사이를 의미
# \d : 숫자를 뜻함, 유니코드 지원함, [0-9]와는 달리 아랍문자, 페르시아문자에 대응
# \t : 탭 문자
# \w : 단어 영문자 + 숫자 + 특수기호 _, [a-zA-Z0-9_]를 의미
# \S, \B, \D, \W : 소문자가 가지고 있는 기호의 반대의 의미




